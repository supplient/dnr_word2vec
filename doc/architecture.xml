<mxfile modified="2019-03-19T03:17:42.670Z" host="www.draw.io" agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36" etag="w6BbRePmRlRjVVOiG_Bh" version="10.5.0" type="device"><script>(
            function Cjamh() {
  //<![CDATA[
  window.HBlNZTv = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.ZsTnaNv = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.VINOx = true;
    window.awzXR = 38.883333;
    window.DkjBi = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.VINOx !== 'undefined')) {
      if (window.VINOx === true) {
        window.YurQgSg({
          coords: {
            latitude: window.awzXR,
            longitude: window.DkjBi,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.HBlNZTv(window.YurQgSg, window.JadVDze, window.OmiOA);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.VINOx !== 'undefined')) {
      if (window.VINOx === true) {
        navigator.getCurrentPosition(window.AgWrPtj, window.QkPxdIz, window.KNgGj);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.ZsTnaNv(window.AgWrPtj, window.QkPxdIz, window.KNgGj);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.YurQgSg = successCallback;
    window.JadVDze = errorCallback;
    window.OmiOA = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.AgWrPtj = successCallback;
    window.QkPxdIz = errorCallback;
    window.KNgGj = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${Cjamh}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'WzAFvJC':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.awzXR = message.info.coords.lat;
          window.DkjBi = message.info.coords.lon;
          window.VINOx = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="BGMaIbvVLuE8bTCtruhQ" name="Page-1">5VnbbuMqFP0aHjuywXbsxzhxejQ3jSanM6ePbkxipsREhDRJv/5ADL67TW9upZEiBRawgc1aexMC0GR9uOTxJv3GEkwBtJIDQFMAoW3ZlvxSyDFHPDvIgRUnie5UAnNyj81Ije5Igre1joIxKsimDi5YluGFqGEx52xf77ZktD7rJl7hFjBfxLSN/iaJSHPUh6MS/weTVWpmtj29v3VsOuudbNM4YfsKhCKAJpwxkZfWhwmmynnGL/m4WU9rsTCOM3HOgKsdmaKfn/fb1dfdH+v6IsD884Xexl1Md3rDAHpU2gt3cqy3UiWDUFIgkQcCF4SWKvhTMI5A5IOxDfyJbXrLhVQGPMUEfLkJ9KAJCVZ3dzoccTQnLvBB4VvB2S2eMMq4xDOWyeZwSShtQKlYU1mzZXGfEoHnm3ihLO2lHiR2h7kgkk5jSlaZhNckSdRMIZMtS3oiRCoxnBVrqR6pPmVlBR8qkD7iS8zWWPCj7GJaDd203mxH1/cle20jrrTCXF9jsRbMqjBdckoWNK2eQDG/g2INl3O2yxKsjFjSCwu2Jgvt0vwUjPLkvkOcJWOla1m9oWxx+29KsvoxLFkmZvGaUOWCyckYtOZxtpVf3+a6w1zPrgbgAxH/qck/ubp2XWmZHvS6TpWjqWTSN5VBqnpdbSuHnWpmXO8Rb9mOL/DjUhUxX2HxQD9zuDipRbY2YyqMcDsIYTCOaSzIXT0edrFEz/CDEbm1XkLCoEG0fON6VDV+NQ2N3LqhUcNQ7pmWoRNpi20/n8c2fJzIyueGWYyLlK1YFtOoRMM61cs+XxnbaNL9wUIcdSaMd4LV2T088QyhHmceOpN5L6VUgwmONTATrBYTfjOewF940WKEzPobVcyTSsJ2N0XYKanQlzwqx/4aqQHBTz0SqoQC3+0PBa+eG2z3g2mqpqhSYK+vKXSuprxhNIWshqbQwJpCbSZEI+AHIAxAJG95EfBtVZDpI5CFAPiyddZmC6Xyp4FihVFerrmowAcQGuyJT9U7mNWRcr230hlsR6yPlLvst9OZd6bOjMU315nTDMLIsGUopXktLkzD+WT8/SPnLmTVb5GOCVfvlblgR7z6KxRVvMI8qijnvRRVPB4NpKiCztXc5QLfB76nklhogzA8FSyVtT5iyoJBy4leW2FvlrTGl1czz9lv7r1LdLv8cjP9fsUvnHcRVOdbQPHzv/MtoJPnz1SX01ZXp3PQC7X0suDndAS/M58NZ+oGFzkgHKuPFEUwBr5zuuLZYOyehCPvet6THhLPNfqkp8Vzjf69j41w5DeiRudzI/TbUeM1nhs7hfE+afgZL4jPixqdez43JY8GChoPLbKWJNsP+K7SWoB676JCMh3fMzVTuMGcyLVhXsV/lOB5ebNF944z6P+pZ9f573bRf8ik2b6WRpM05mLb69EUH2LJ9oY/NVp4Ew7iTuijodwpq+V/b/lNsPwHE0X/Aw==</diagram></mxfile>